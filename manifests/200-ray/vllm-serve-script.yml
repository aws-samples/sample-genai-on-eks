apiVersion: v1
kind: ConfigMap
metadata:
  name: vllm-serve-script
data:
  vllm_serve.py: |
    import os
    import re
    from typing import Optional
    from fastapi import FastAPI
    from prometheus_client import make_asgi_app
    from starlette.requests import Request
    from starlette.responses import StreamingResponse, JSONResponse
    from starlette.routing import Mount
    from ray import serve
    from vllm.engine.arg_utils import AsyncEngineArgs
    from vllm.engine.async_llm_engine import AsyncLLMEngine
    from vllm.entrypoints.openai.protocol import (
        CompletionRequest,
        CompletionResponse,
        ChatCompletionRequest,
        ChatCompletionResponse,
        ErrorResponse,
    )
    from vllm.entrypoints.openai.serving_chat import OpenAIServingChat
    from vllm.entrypoints.openai.serving_completion import OpenAIServingCompletion
    from vllm.entrypoints.openai.serving_models import OpenAIServingModels, BaseModelPath
    from vllm.config import ModelConfig
    from vllm.logger import init_logger

    logger = init_logger(__name__)
    app = FastAPI()

    @serve.deployment(
        name="mistral-deployment",
        ray_actor_options={"num_gpus": 1},
        health_check_period_s=10
    )
    @serve.ingress(app)
    class VLLMDeployment:
        def __init__(
            self,
            model: str,
            tensor_parallel_size: int,
            max_num_seqs: int,
            max_model_len: int,
            response_role: str = "assistant",
            chat_template: Optional[str] = None,
        ):
            # Setup vLLM metrics for scraping
            route = Mount("/metrics", make_asgi_app())
            # Workaround for 307 Redirect for /metrics
            route.path_regex = re.compile('^/metrics(?P<path>.*)')
            app.routes.append(route)
            
            logger.info("VLLMDeployment is initializing...")
            self.model_path = model
            self.max_model_len = max_model_len

            # Base model config
            self.model_config = ModelConfig(
                model=model,
                task="generate",
                tokenizer=model,
                tokenizer_mode="auto",
                trust_remote_code=True,
                dtype="bfloat16",
                seed=42,
                max_model_len=max_model_len,
            )

            # HF config override (e.g., head_dim for Mistral)
            hf_overrides = {}
            _hd = os.environ.get("HEAD_DIM")
            if _hd:
                try:
                    hf_overrides["head_dim"] = int(_hd)
                    logger.info(f"Using HF override head_dim={hf_overrides['head_dim']}")
                except ValueError:
                    logger.warning("HEAD_DIM is not an int; ignoring override.")

            # Engine args - conditionally add hf_overrides
            engine_kwargs = {
                "model": model,
                "tokenizer_mode": "mistral",
                "tensor_parallel_size": tensor_parallel_size,
                "max_num_seqs": max_num_seqs,
                "max_model_len": max_model_len,
                "dtype": "bfloat16",
                "trust_remote_code": True,
                "gpu_memory_utilization": 0.9,
                "enable_chunked_prefill": True,
            }
            if hf_overrides:
                engine_kwargs["hf_overrides"] = hf_overrides
            
            engine_args = AsyncEngineArgs(**engine_kwargs)
            logger.info(f"Engine Args Initialized: {engine_args}")

            try:
                self.engine = AsyncLLMEngine.from_engine_args(engine_args)
                logger.info("VLLM Engine initialized successfully")
            except Exception as e:
                logger.error(f"Error initializing VLLM engine: {str(e)}")
                raise

            self.response_role = response_role
            self.chat_template = chat_template
            self.openai_serving_chat = None
            self.openai_serving = None

            # Models shim
            self.models = OpenAIServingModels(
                engine_client=None,
                model_config=self.model_config,
                base_model_paths=[BaseModelPath(name=model, model_path=model)]
            )

        async def health_check(self):
            logger.info("Health check passed for VLLMDeployment.")
            return "OK"

        @app.get("/v1/models")
        async def get_models(self):
            return JSONResponse(
                content={
                    "object": "list",
                    "data": [
                        {
                            "id": self.model_path,
                            "object": "model",
                            "owned_by": "organization",
                            "permission": [],
                        }
                    ],
                }
            )

        @app.post("/v1/completions")
        async def create_completion(self, request: CompletionRequest, raw_request: Request):
            if not self.openai_serving:
                model_config = await self.engine.get_model_config()
                base_model_paths = [BaseModelPath(name=self.model_path, model_path=self.model_path)]
                openai_serving_models = OpenAIServingModels(
                    engine_client=self.engine,
                    model_config=model_config,
                    base_model_paths=base_model_paths,
                )
                self.openai_serving = OpenAIServingCompletion(
                    engine_client=self.engine,
                    model_config=model_config,
                    models=openai_serving_models,
                    request_logger=None
                )

            logger.info(f"Request: {request}")
            generator = await self.openai_serving.create_completion(request, raw_request)
            if isinstance(generator, ErrorResponse):
                return JSONResponse(content=generator.model_dump(), status_code=generator.code)
            if request.stream:
                return StreamingResponse(content=generator, media_type="text/event-stream")
            else:
                assert isinstance(generator, CompletionResponse)
                return JSONResponse(content=generator.model_dump())

        @app.post("/v1/chat/completions")
        async def create_chat_completion(
            self, request: ChatCompletionRequest, raw_request: Request
        ):
            """Handle chat requests with OpenAI-compatible response format."""
            if not self.openai_serving_chat:
                logger.info("Initializing OpenAIServingChat instance...")

                # Tool-calling toggles (no template needed)
                enable_tools = os.environ.get("ENABLE_AUTO_TOOL_CHOICE", "false").lower() in ("1", "true", "yes")
                tool_parser = os.environ.get("TOOL_CALL_PARSER", "").strip() or None

                model_config = await self.engine.get_model_config()
                base_model_paths = [BaseModelPath(name=self.model_path, model_path=self.model_path)]
                openai_serving_models = OpenAIServingModels(
                    engine_client=self.engine,
                    model_config=model_config,
                    base_model_paths=base_model_paths,
                )
                self.openai_serving_chat = OpenAIServingChat(
                    engine_client=self.engine,
                    model_config=model_config,
                    models=openai_serving_models,
                    response_role=self.response_role,
                    request_logger=None,
                    chat_template=self.chat_template,          # None is fine
                    chat_template_content_format="default",
                    return_tokens_as_token_ids=False,
                    enable_auto_tools=enable_tools,            # tool calling on/off
                    tool_parser=tool_parser,                   # e.g., "mistral"
                    enable_prompt_tokens_details=False,
                )
                logger.info(f"OpenAIServingChat initialized. tools={enable_tools} parser={tool_parser!r}")

            logger.info(f"Received request: {request}")
            generator = await self.openai_serving_chat.create_chat_completion(request, raw_request)

            if isinstance(generator, ErrorResponse):
                return JSONResponse(content=generator.model_dump(), status_code=generator.code)

            if request.stream:
                return StreamingResponse(content=generator, media_type="text/event-stream")
            else:
                assert isinstance(generator, ChatCompletionResponse)
                return JSONResponse(content=generator.model_dump())

    deployment = VLLMDeployment.bind(
        model=os.environ.get('MODEL_ID', '/models/mistral-7b-v0-3'),
        tensor_parallel_size=int(os.environ.get('TENSOR_PARALLEL_SIZE', '1')),
        max_num_seqs=int(os.environ.get('MAX_NUM_SEQS', '32')),
        max_model_len=int(os.environ.get('MAX_MODEL_LEN', '8192')),
    )
